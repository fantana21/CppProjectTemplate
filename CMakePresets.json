{
  "version": 3,
  "cmakeMinimumRequired": {
    "major": 3,
    "minor": 21,
    "patch": 0
  },
  "configurePresets": [
    {
      "name": "vcpkg",
      "hidden": true,
      "toolchainFile": "$env{VCPKG_ROOT}/scripts/buildsystems/vcpkg.cmake"
    },
    {
      "name": "dev-mode",
      "hidden": true,
      "cacheVariables": {
        "CppProjectTemplate_DEVELOPER_MODE": "ON",
        "VCPKG_MANIFEST_FEATURES": "test"
      }
    },
    {
      "name": "cpp-std",
      "description": "This preset makes sure the project actually builds with at least the specified standard",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_STANDARD": "20",
        "CMAKE_CXX_STANDARD_REQUIRED": "ON",
        "CMAKE_CXX_EXTENSIONS": "OFF"
      }
    },
    {
      "name": "flags-gcc-clang",
      "description": "These flags are supported by both GCC and Clang",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "-U_FORTIFY_SOURCE -D_FORTIFY_SOURCE=3 -D_GLIBCXX_ASSERTIONS=1 -fstack-protector-strong -fcf-protection=full -fstack-clash-protection -Wall -Wextra -Wpedantic -Wconversion -Wsign-conversion -Wcast-qual -Wformat=2 -Wundef -Wshadow -Wcast-align -Wunused -Wnull-dereference -Wdouble-promotion -Wimplicit-fallthrough -Wextra-semi -Woverloaded-virtual -Wnon-virtual-dtor -Wold-style-cast",
        "CMAKE_EXE_LINKER_FLAGS": "-Wl,--allow-shlib-undefined,--as-needed,-z,noexecstack,-z,relro,-z,now,-z,nodlopen",
        "CMAKE_SHARED_LINKER_FLAGS": "-Wl,--allow-shlib-undefined,--as-needed,-z,noexecstack,-z,relro,-z,now,-z,nodlopen"
      }
    },
    {
      "name": "flags-msvc",
      "description": "Note that all the flags after /W4 are required for MSVC to conform to the language standard",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "/sdl /guard:cf /utf-8 /diagnostics:caret /w14165 /w44242 /w44254 /w44263 /w34265 /w34287 /w44296 /w44365 /w44388 /w44464 /w14545 /w14546 /w14547 /w14549 /w14555 /w34619 /w34640 /w24826 /w14905 /w14906 /w14928 /w45038 /W4 /permissive- /volatile:iso /Zc:inline /Zc:preprocessor /Zc:enumTypes /Zc:lambda /Zc:__cplusplus /Zc:externConstexpr /Zc:throwingNew /EHsc",
        "CMAKE_EXE_LINKER_FLAGS": "/machine:x64 /guard:cf",
        "CMAKE_SHARED_LINKER_FLAGS": "/machine:x64 /guard:cf"
      }
    },
    {
      "name": "flags-clang-cl",
      "description": "Clang-cl supports the same flags as MSVC apart from some /Zc: flags",
      "hidden": true,
      "inherits": [
        "flags-msvc"
      ],
      "cacheVariables": {
        "CMAKE_CXX_FLAGS": "/sdl /guard:cf /utf-8 /diagnostics:caret /w14165 /w44242 /w44254 /w44263 /w34265 /w34287 /w44296 /w44365 /w44388 /w44464 /w14545 /w14546 /w14547 /w14549 /w14555 /w34619 /w34640 /w24826 /w14905 /w14906 /w14928 /w45038 /W4 /permissive- /volatile:iso /Zc:inline /Zc:__cplusplus /EHsc"
      }
    },
    {
      "name": "clang-tidy",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_CLANG_TIDY": "clang-tidy;--header-filter=^${sourceDir}/"
      }
    },
    {
      "name": "clang-tidy-msvc",
      "description": "The header-filter seems to apply to relative paths on Windows. Also, there is a bug where clang-tidy doesn't recognize the /EHsc flag, so we pass it manually (see https://gitlab.kitware.com/cmake/cmake/-/issues/20512).",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_CLANG_TIDY": "clang-tidy;--header-filter=.*;--extra-arg=/EHsc"
      }
    },
    {
      "name": "cppcheck",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_CPPCHECK": "cppcheck;--inline-suppr"
      }
    },
    {
      "name": "include-what-you-use",
      "hidden": true,
      "cacheVariables": {
        "CMAKE_CXX_INCLUDE_WHAT_YOU_USE": "include-what-you-use"
      }
    },
    {
      "name": "common-linux",
      "hidden": true,
      "inherits": [
        "vcpkg",
        "dev-mode",
        "cpp-std",
        "flags-gcc-clang"
      ],
      "generator": "Ninja Multi-Config",
      "binaryDir": "${sourceDir}/build/${presetName}"
    },
    {
      "name": "ci-ubuntu",
      "description": "For building and static code checking on Ubuntu runners with GCC or Clang",
      "inherits": [
        "common-linux",
        "clang-tidy",
        "cppcheck"
      ]
    },
    {
      "name": "coverage",
      "description": "These coverage flags are supported by both GCC and Clang",
      "hidden": true,
      "cacheVariables": {
        "ENABLE_COVERAGE": "ON",
        "CMAKE_BUILD_TYPE": "Coverage",
        "CMAKE_CXX_FLAGS_COVERAGE": "-O0 -g --coverage",
        "CMAKE_EXE_LINKER_FLAGS_COVERAGE": "--coverage",
        "CMAKE_SHARED_LINKER_FLAGS_COVERAGE": "--coverage",
        "CMAKE_MAP_IMPORTED_CONFIG_COVERAGE": "Coverage;RelWithDebInfo;Release;Debug;"
      }
    },
    {
      "name": "ci-coverage",
      "description": "For generating coverage reports on Ubuntu runners with GCC or Clang",
      "inherits": [
        "common-linux",
        "coverage"
      ],
      "generator": "Ninja"
    },
    {
      "name": "ci-sanitize",
      "description": "For running sanitizers on Ubuntu runners with GCC or Clang",
      "inherits": [
        "common-linux"
      ],
      "generator": "Ninja",
      "cacheVariables": {
        "CMAKE_BUILD_TYPE": "Sanitize",
        "CMAKE_CXX_FLAGS_SANITIZE": "-U_FORTIFY_SOURCE -O2 -g -fsanitize=address,undefined -fno-omit-frame-pointer -fno-common",
        "CMAKE_MAP_IMPORTED_CONFIG_SANITIZE": "Sanitize;RelWithDebInfo;Release;Debug;"
      }
    },
    {
      "name": "common-windows",
      "hidden": true,
      "inherits": [
        "vcpkg",
        "dev-mode",
        "cpp-std"
      ],
      "binaryDir": "${sourceDir}/build/${presetName}",
      "cacheVariables": {
        "VCPKG_HOST_TRIPLET": "x64-windows-static-md",
        "VCPKG_TARGET_TRIPLET": "x64-windows-static-md"
      }
    },
    {
      "name": "ci-windows-msvc",
      "description": "For building on Windows runners with MSVC and MSBuild",
      "inherits": [
        "common-windows",
        "flags-msvc"
      ],
      "generator": "Visual Studio 17 2022",
      "architecture": "x64",
      "cacheVariables": {
        "VCPKG_INSTALL_OPTIONS": "--debug"
      }
    },
    {
      "name": "ci-windows-clang-cl",
      "description": "For building on Windows runners with clang-cl (requires a working MSVC environment)",
      "inherits": [
        "flags-clang-cl",
        "common-windows"
      ],
      "generator": "Ninja Multi-Config",
      "cacheVariables": {
        "CMAKE_CXX_COMPILER": "clang-cl",
        "VCPKG_INSTALL_OPTIONS": "--debug"
      }
    },
    {
      "name": "dev-linux-gcc",
      "inherits": [
        "common-linux",
        "clang-tidy",
        "cppcheck",
        "include-what-you-use"
      ],
      "cacheVariables": {
        "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
        "CMAKE_CXX_COMPILER": "g++"
      }
    },
    {
      "name": "dev-linux-coverage-gcc",
      "inherits": [
        "common-linux",
        "coverage"
      ],
      "generator": "Ninja",
      "cacheVariables": {
        "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
        "CMAKE_CXX_COMPILER": "g++"
      }
    },
    {
      "name": "dev-linux-clang",
      "inherits": [
        "dev-linux-gcc"
      ],
      "cacheVariables": {
        "CMAKE_CXX_COMPILER": "clang++"
      }
    },
    {
      "name": "dev-windows-msvc",
      "description": "Requires toolchain from MarkSchofield/WindowsToolchain",
      "inherits": [
        "common-windows",
        "flags-msvc",
        "clang-tidy-msvc",
        "cppcheck"
      ],
      "generator": "Ninja Multi-Config",
      "cacheVariables": {
        "CMAKE_EXPORT_COMPILE_COMMANDS": "ON",
        "VCPKG_CHAINLOAD_TOOLCHAIN_FILE": "$env{WINDOWS_TOOLCHAIN_ROOT}/Windows.MSVC.toolchain.cmake"
      }
    },
    {
      "name": "dev-windows-clang-cl",
      "description": "Requires toolchain from MarkSchofield/WindowsToolchain and triplet from Neumann-A/my-vcpkg-triplets",
      "inherits": [
        "flags-clang-cl",
        "dev-windows-msvc"
      ],
      "cacheVariables": {
        "CMAKE_C_COMPILER_FRONTEND_VARIANT": "MSVC",
        "CMAKE_CXX_COMPILER_FRONTEND_VARIANT": "MSVC",
        "VCPKG_CHAINLOAD_TOOLCHAIN_FILE": "$env{WINDOWS_TOOLCHAIN_ROOT}/Windows.Clang.toolchain.cmake",
        "VCPKG_HOST_TRIPLET": "x64-win-llvm-static-md",
        "VCPKG_TARGET_TRIPLET": "x64-win-llvm-static-md"
      }
    }
  ],
  "buildPresets": [
    {
      "name": "ci-ubuntu-debug",
      "configurePreset": "ci-ubuntu",
      "configuration": "Debug"
    },
    {
      "name": "ci-ubuntu-release",
      "configurePreset": "ci-ubuntu",
      "configuration": "Release"
    },
    {
      "name": "ci-coverage",
      "configurePreset": "ci-coverage"
    },
    {
      "name": "ci-sanitize",
      "configurePreset": "ci-sanitize"
    },
    {
      "name": "ci-windows-msvc-debug",
      "configurePreset": "ci-windows-msvc",
      "configuration": "Debug"
    },
    {
      "name": "ci-windows-msvc-release",
      "configurePreset": "ci-windows-msvc",
      "configuration": "Release"
    },
    {
      "name": "ci-windows-clang-cl-debug",
      "configurePreset": "ci-windows-clang-cl",
      "configuration": "Debug"
    },
    {
      "name": "ci-windows-clang-cl-release",
      "configurePreset": "ci-windows-clang-cl",
      "configuration": "Release"
    },
    {
      "name": "dev-linux-gcc-debug",
      "configurePreset": "dev-linux-gcc",
      "configuration": "Debug"
    },
    {
      "name": "dev-linux-gcc-release",
      "configurePreset": "dev-linux-gcc",
      "configuration": "Release"
    },
    {
      "name": "dev-linux-clang-debug",
      "configurePreset": "dev-linux-clang",
      "configuration": "Debug"
    },
    {
      "name": "dev-linux-clang-release",
      "configurePreset": "dev-linux-clang",
      "configuration": "Release"
    },
    {
      "name": "dev-windows-msvc-debug",
      "configurePreset": "dev-windows-msvc",
      "configuration": "Debug"
    },
    {
      "name": "dev-windows-msvc-release",
      "configurePreset": "dev-windows-msvc",
      "configuration": "Release"
    },
    {
      "name": "dev-windows-clang-cl-debug",
      "configurePreset": "dev-windows-clang-cl",
      "configuration": "Debug"
    },
    {
      "name": "dev-windows-clang-cl-release",
      "configurePreset": "dev-windows-clang-cl",
      "configuration": "Release"
    }
  ],
  "testPresets": [
    {
      "name": "ci-common",
      "hidden": true,
      "output": {
        "outputOnFailure": true,
        "verbosity": "verbose"
      },
      "execution": {
        "jobs": 2,
        "noTestsAction": "error"
      }
    },
    {
      "name": "ci-ubuntu",
      "description": "Run latest tests built with GCC or Clang on Ubuntu runners",
      "inherits": "ci-common",
      "configurePreset": "ci-ubuntu"
    },
    {
      "name": "ci-coverage",
      "description": "Run tests built with GCC or Clang and coverage enabled on Ubuntu runners",
      "inherits": "ci-common",
      "configurePreset": "ci-coverage"
    },
    {
      "name": "ci-sanitize",
      "description": "Run the latest tests built with GCC or Clang and sanitizers enabled on Ubuntu runners",
      "inherits": "ci-common",
      "configurePreset": "ci-sanitize"
    },
    {
      "name": "ci-windows-msvc",
      "description": "Run the latest tests built with MSVC on Windows runners",
      "inherits": "ci-common",
      "configurePreset": "ci-windows-msvc"
    },
    {
      "name": "ci-windows-clang-cl",
      "description": "Run the latest tests built with clang-cl on Windows runners",
      "inherits": "ci-common",
      "configurePreset": "ci-windows-clang-cl"
    }
  ]
}
