name: Continuous Integration

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

env:
  LLVM_VERSION: 18
  CMAKE_VERSION: 3.28.6
  NINJA_VERSION: 1.10.1
  VCPKG_COMMITTISH: 49ac2134b31b95b0ddf29d56873dcd24392691df

jobs:
  format-and-spell:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up clang-format
        uses: aminya/setup-cpp@v1
        with:
          clangformat: ${{ env.LLVM_VERSION }}

      - name: Install codespell and cmake-format
        run: pip install codespell cmakelang

      - name: Print versions
        run: |
          python --version
          pip --version
          cmake --version
          clang-format --version
          cmake-format --version
          codespell --version

      - name: Format code
        run: cmake -P CMake/Format.cmake

      - name: Spell check
        run: cmake -P CMake/Spell.cmake

  test-windows:
    needs: format-and-spell
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Set up build tools
        uses: aminya/setup-cpp@v1
        with:
          vcvarsall: true
          cmake: ${{ env.CMAKE_VERSION }}
          ninja: ${{ env.NINJA_VERSION }}

      - name: Print version of build tools
        run: |
          cmake --version
          ninja --version

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
            vcpkg-${{ runner.os }}

      - name: Set up MultiToolTask
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Build and test debug and release mode (MSVC)
        run: |
          cmake --preset=ci-windows-msvc
          cmake --build --preset=ci-windows-msvc-debug
          ctest --preset ci-windows-msvc
          cmake --build --preset=ci-windows-msvc-release
          ctest --preset ci-windows-msvc

      - name: Build and test debug and release mode (clang-cl)
        run: |
          cmake --preset=ci-windows-clang-cl
          cmake --build --preset=ci-windows-clang-cl-debug
          ctest --preset ci-windows-clang-cl
          cmake --build --preset=ci-windows-clang-cl-release
          ctest --preset ci-windows-clang-cl

  test-ubuntu:
    needs: format-and-spell
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install GCC 13
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc-13

      - name: Print compiler versions
        run: |
          g++ --version
          clang++ --version || true

      - name: Install LLVM ${{ env.LLVM_VERSION }} and tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm-${{ env.LLVM_VERSION }}
          cmake: ${{ env.CMAKE_VERSION }}
          ninja: ${{ env.NINJA_VERSION }}
          clangtidy: ${{ env.LLVM_VERSION }}
          cppcheck: true
          gcovr: 7

      - name: Install Include What You Use
        run: |
          git clone --depth 1 --branch clang_${{ env.LLVM_VERSION }} https://github.com/include-what-you-use/include-what-you-use.git
          cd include-what-you-use
          cmake -B build -S . -G Ninja -DCMAKE_PREFIX_PATH=/usr/lib/llvm-${{ env.LLVM_VERSION }}
          cmake --build build
          sudo cmake --install build

      - name: Print versions of compilers and tools
        run: |
          g++ --version || true
          clang++ --version
          cmake --version
          ninja --version
          clang-tidy --version
          cppcheck --version
          gcovr --version
          gcov --version || true
          gcov-13 --version || true
          llvm-cov --version || true

      - name: Install vcpkg
        id: install-vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
            vcpkg-${{ runner.os }}

      - name: Build and test debug and release mode (GCC)
        id: test-gcc
        run: |
          export CXX=g++
          cmake --preset=ci-ubuntu
          cmake --build --preset=ci-ubuntu-debug
          ctest --preset ci-ubuntu
          cmake --build --preset=ci-ubuntu-release
          ctest --preset ci-ubuntu

      - name: Build, test, and generate coverage reports (GCC)
        run: |
          export CXX=g++
          cmake --preset=ci-coverage
          cmake --build --preset=ci-coverage
          ctest --preset ci-coverage
          cmake --build --preset=ci-coverage -t coverage
          echo -e "## Code coverage report\n\n~~~" > Coverage.md
          tail build/ci-coverage/Coverage.txt -n +4 >> Coverage.md
          echo "~~~" >> Coverage.md

      - name: Upload HTML and XML coverage reports as artifacts (GCC)
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReportsGcc
          path: |
            build/ci-coverage/CoverageHtml/
            build/ci-coverage/Coverage.xml

      - name: Show Markdown coverage report as job summary (GCC)
        run: cat Coverage.md > $GITHUB_STEP_SUMMARY

      - name: Show Markdown coverage report as sticky PR comment (GCC)
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: Coverage.md

      - name: Build and test with sanitizers (GCC)
        if: ${{ !cancelled() && steps.test-gcc.conclusion == 'success' }}
        run: |
          export CXX=g++
          cmake --preset=ci-sanitize
          cmake --build --preset=ci-sanitize
          ctest --preset ci-sanitize

      - name: Build and test debug and release mode (Clang)
        id: test-clang
        if: ${{ !cancelled() && steps.install-vcpkg.conclusion == 'success' }}
        run: |
          rm -rf build
          export CXX=clang++
          cmake --preset=ci-ubuntu
          cmake --build --preset=ci-ubuntu-debug
          ctest --preset ci-ubuntu
          cmake --build --preset=ci-ubuntu-release
          ctest --preset ci-ubuntu

      - name: Build, test, and generate coverage reports (Clang)
        id: coverage-clang
        if: ${{ !cancelled() && steps.test-clang.conclusion == 'success' }}
        run: |
          export CXX=clang++
          cmake --preset=ci-coverage
          cmake --build --preset=ci-coverage
          ctest --preset ci-coverage
          cmake --build --preset=ci-coverage -t coverage
          echo -e "## Code coverage report\n\n~~~" > Coverage.md
          tail build/ci-coverage/Coverage.txt -n +4 >> Coverage.md
          echo "~~~" >> Coverage.md

      - name: Upload HTML and XML coverage reports as artifacts (Clang)
        if: ${{ !cancelled() && steps.coverage-clang.conclusion == 'success' }}
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReportsClang
          path: |
            build/ci-coverage/CoverageHtml/
            build/ci-coverage/Coverage.xml

      - name: Show Markdown coverage report as job summary (Clang)
        run: cat Coverage.md > $GITHUB_STEP_SUMMARY

      - name: Show Markdown coverage report as sticky PR comment (Clang)
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: Coverage.md

      - name: Build and test with sanitizers (Clang)
        if: ${{ !cancelled() && steps.test-clang.conclusion == 'success' }}
        run: |
          export CXX=clang++
          cmake --preset=ci-sanitize
          cmake --build --preset=ci-sanitize
          ctest --preset ci-sanitize
