name: Continuous Integration

on:
  push:
    branches:
    - master

  pull_request:
    branches:
    - master

env:
  VCPKG_COMMIT: "46e4c4c78c347ded6add526b0c2bb66db35d4710"

jobs:
  format-and-spell:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up clang-format
      uses: aminya/setup-cpp@v1
      with:
        clangformat: 18.1.5

    - name: Install codespell and cmake-format
      run: pip install codespell cmakelang

    - name: Print versions
      run: |
        python --version
        pip --version
        cmake --version
        clang-format --version
        cmake-format --version
        codespell --version

    - name: Format code
      run: cmake -P CMake/Format.cmake

    - name: Spell check
      run: cmake -P CMake/Spell.cmake

  coverage:
    if: false
    needs: [format-and-spell]
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Install vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: { committish: "${{ env.VCPKG_COMMIT }}" }

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      run: ctest --test-dir build/coverage --output-on-failure --no-tests=error -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

  sanitize:
    if: false
    needs: [format-and-spell]
    runs-on: ubuntu-22.04
    env: { CXX: clang++-14 }
    steps:
    - uses: actions/checkout@v4

    - name: Install vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: { committish: "${{ env.VCPKG_COMMIT }}" }

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1:\
          halt_on_error=1"
        UBSAN_OPTIONS: "print_stacktrace=1:\
          halt_on_error=1"
      run: ctest --output-on-failure --no-tests=error -j 2

  test:
    if: false
    needs: [format-and-spell]
    strategy:
      matrix:
        os: [ubuntu-22.04, windows-2022]
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Install static analyzers
      if: matrix.os == 'ubuntu-22.04'
      run: >-
        sudo apt-get install clang-tidy-14 cppcheck -y -q

        sudo update-alternatives --install
        /usr/bin/clang-tidy clang-tidy
        /usr/bin/clang-tidy-14 140

    - name: Install vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: { committish: "${{ env.VCPKG_COMMIT }}" }

    - name: Setup MultiToolTask
      if: matrix.os == 'windows-2022'
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Configure
      shell: pwsh
      run: cmake "--preset=ci-$("${{ matrix.os }}".split("-")[0])"

    - name: Build
      run: cmake --build build --config Release -j 2

    - name: Install
      run: cmake --install build --config Release --prefix prefix

    - name: Test
      working-directory: build
      run: ctest --output-on-failure --no-tests=error -C Release -j 2
      