name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CMAKE_VERSION: "3.29.6"
  VCPKG_COMMITTISH: 49ac2134b31b95b0ddf29d56873dcd24392691df

jobs:
  format-and-spell:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Install codespell and cmake-format
        run: pipx install codespell cmakelang

      - name: Print versions
        run: |
          python --version
          pipx --version
          cmake --version
          clang-format --version
          cmake-format --version
          codespell --version

      - name: Format code
        run: cmake -P CMake/Format.cmake

      - name: Spell check
        run: cmake -P CMake/Spell.cmake

  test-windows:
    needs: format-and-spell
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Set up build tools
        uses: aminya/setup-cpp@v1
        with:
          vcvarsall: true
          cmake: ${{ env.CMAKE_VERSION }}
          ninja: true

      - name: Print version of build tools
        run: |
          cmake --version
          ninja --version

      - name: Set up vcpkg
        uses: fantana21/set-up-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
            vcpkg-${{ runner.os }}
          save-always: true
          use-private-registry: true
          private-registry-pat: ${{ secrets.VCPKG_REGISTRY_PAT }}

      - name: Pre-seed credentials for private repos
        run: |
          "url=https://github.com`nusername=AllRepositories`npassword=${{ secrets.ALL_REPOSITORIES_PAT }}`n" | git credential approve

      - name: Set up MultiToolTask
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Build and test debug and release mode (MSVC)
        run: |
          cmake --preset ci-windows-msvc
          cmake --build --preset ci-windows-msvc-debug | Tee-Object -FilePath MSVC_Debug_build.log
          ctest --preset ci-windows-msvc
          cmake --build --preset ci-windows-msvc-release | Tee-Object -FilePath MSVC_Release_build.log
          ctest --preset ci-windows-msvc

      - name: Build and test debug and release mode (clang-cl)
        run: |
          cmake --preset ci-windows-clang-cl
          cmake --build --preset ci-windows-clang-cl-debug | Tee-Object -FilePath Clang-cl_Debug_build.log
          ctest --preset ci-windows-clang-cl
          cmake --build --preset ci-windows-clang-cl-release | Tee-Object -FilePath Clang-cl_Release_build.log
          ctest --preset ci-windows-clang-cl

      - name: Count and report warnings
        uses: fantana21/report-warnings@v1
        with:
          build-logs: |
            MSVC_Debug_build.log
            MSVC_Release_build.log
            Clang-cl_Debug_build.log
            Clang-cl_Release_build.log
          artifact-name: WarningsReportWindows
          pr-comment-header: windows warnings report

  test-ubuntu:
    needs: format-and-spell
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update -q
          sudo apt-get install -y cppcheck ninja-build valgrind llvm
          pipx install gcovr

      - name: Print and store version info
        shell: pwsh
        run: |
          g++ --version
          clang++ --version
          cmake --version
          ninja --version
          clang-tidy --version
          cppcheck --version
          gcovr --version
          gcov --version
          llvm-cov --version
          valgrind --version

          $CLANG_VERSIONS = (clang++ --version | Select-String -Pattern '([0-9]+)\.([0-9]+)\.([0-9]+)').Matches.Groups.Value
          "CLANG_MAJOR_VERSION=$($CLANG_VERSIONS[1])" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install Include What You Use
        run: |
          sudo apt-get install -y llvm-${{ env.CLANG_MAJOR_VERSION }}-dev libclang-${{ env.CLANG_MAJOR_VERSION }}-dev
          git clone --depth 1 --branch clang_${{ env.CLANG_MAJOR_VERSION }} https://github.com/include-what-you-use/include-what-you-use.git
          cd include-what-you-use
          cmake -B build -S . -G Ninja -DCMAKE_PREFIX_PATH=/usr/lib/llvm-${{ env.CLANG_MAJOR_VERSION }}
          cmake --build build
          sudo cmake --install build

      - name: Set up vcpkg
        id: set-up-vcpkg
        uses: fantana21/set-up-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
            vcpkg-${{ runner.os }}
          save-always: true
          use-private-registry: true
          private-registry-pat: ${{ secrets.VCPKG_REGISTRY_PAT }}

      - name: Set up credential helper for private repos
        run: |
          git config --global credential.https://github.com/fantana21.helper '!f() { echo username=QuantNd; echo password=${{ secrets.ALL_REPOSITORIES_PAT }}; }; f'

      - name: Build and test debug and release mode (GCC)
        id: test-gcc
        run: |
          export CXX=g++
          cmake --preset ci-ubuntu
          cmake --build --preset ci-ubuntu-debug | tee GCC_Debug_build.log
          ctest --preset ci-ubuntu
          cmake --build --preset ci-ubuntu-release | tee GCC_Release_build.log
          ctest --preset ci-ubuntu

      - name: Build, test, and generate coverage reports (GCC)
        id: coverage-gcc
        run: |
          export CXX=g++
          cmake --workflow --preset ci-coverage

      - name: Build and test with sanitizers (GCC)
        id: sanitize-gcc
        if: ${{ !cancelled() && steps.test-gcc.conclusion == 'success' }}
        run: |
          export CXX=g++
          cmake --workflow --preset ci-sanitize

      - name: Build and test debug and release mode with Valgrind (GCC)
        # Running tests with Valgrind is slow, so we only do it if running them with sanitizers
        # succeeded
        id: valgrind-gcc
        if: ${{ !cancelled() && steps.sanitize-gcc.conclusion == 'success' }}
        run: |
          export CXX=g++
          cmake --workflow --preset ci-valgrind

      - name: Build with Include What You Use
        if: ${{ !cancelled() && steps.valgrind-gcc.conclusion == 'success' }}
        run: |
          export CXX=g++
          cmake --workflow --preset ci-include-what-you-use

      - name: Build and test debug and release mode (Clang)
        id: test-clang
        if: ${{ !cancelled() && steps.set-up-vcpkg.conclusion == 'success' }}
        run: |
          rm -rf build
          export CXX=clang++
          cmake --preset ci-ubuntu
          cmake --build --preset ci-ubuntu-debug | tee Clang_Debug_build.log
          ctest --preset ci-ubuntu
          cmake --build --preset ci-ubuntu-release | tee Clang_Release_build.log
          ctest --preset ci-ubuntu

      - name: Build, test, and generate coverage reports (Clang)
        id: coverage-clang
        if: ${{ !cancelled() && steps.test-clang.conclusion == 'success' }}
        run: |
          export CXX=clang++
          cmake --workflow --preset ci-coverage

      - name: Build and test with sanitizers (Clang)
        id: sanitize-clang
        if: ${{ !cancelled() && steps.test-clang.conclusion == 'success' }}
        run: |
          export CXX=clang++
          cmake --workflow --preset ci-sanitize

      - name: Build and test debug and release mode with Valgrind (Clang)
        # Running tests with Valgrind is slow, so we only do it if running them with sanitizers
        # succeeded.
        if: ${{ !cancelled() && steps.sanitize-clang.conclusion == 'success' }}
        run: |
          export CXX=clang++
          cmake --workflow --preset ci-valgrind

      - name: Count and report warnings
        if: ${{ !cancelled() && steps.test-gcc.conclusion == 'success' && steps.test-clang.conclusion == 'success' }}
        uses: fantana21/report-warnings@v1
        with:
          build-logs: |
            GCC_Debug_build.log
            GCC_Release_build.log
            Clang_Debug_build.log
            Clang_Release_build.log
          artifact-name: WarningsReportUbuntu
          pr-comment-header: ubuntu warnings report

      - name: Report coverage results as job summary, PR comment, and artifact (GCC)
        if: ${{ !cancelled() && steps.coverage-gcc.conclusion == 'success' }}
        uses: fantana21/report-coverage@v1
        with:
          pr-comment-header: gcc
          artifact-name: CoverageReportsGcc

      - name: Report coverage results as job summary, PR comment, and artifact (Clang)
        if: ${{ !cancelled() && steps.coverage-clang.conclusion == 'success' }}
        uses: fantana21/report-coverage@v1
        with:
          pr-comment-header: clang
          artifact-name: CoverageReportsClang
