name: Continuous Integration

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

env:
  LLVM_VERSION: 18.1.5
  CMAKE_VERSION: 3.28.6
  NINJA_VERSION: 1.10.1
  VCPKG_COMMITTISH: 49ac2134b31b95b0ddf29d56873dcd24392691df

jobs:
  format-and-spell:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up clang-format
        uses: aminya/setup-cpp@v1
        with:
          clangformat: ${{ env.LLVM_VERSION }}

      - name: Install codespell and cmake-format
        run: pip install codespell cmakelang

      - name: Print versions
        run: |
          python --version
          pip --version
          cmake --version
          clang-format --version
          cmake-format --version
          codespell --version

      - name: Format code
        run: cmake -P CMake/Format.cmake

      - name: Spell check
        run: cmake -P CMake/Spell.cmake

  coverage:
    if: false
    needs: [format-and-spell]
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install LCov
        run: sudo apt-get update -q
          && sudo apt-get install lcov -q -y

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "${{ env.VCPKG_COMMIT }}" }

      - name: Configure
        run: cmake --preset=ci-coverage

      - name: Build
        run: cmake --build build/coverage -j 2

      - name: Test
        run: ctest --test-dir build/coverage --output-on-failure --no-tests=error -j 2

      - name: Process coverage info
        run: cmake --build build/coverage -t coverage

  sanitize:
    if: false
    needs: [format-and-spell]
    runs-on: ubuntu-22.04
    env: { CXX: clang++-14 }
    steps:
      - uses: actions/checkout@v4

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with: { committish: "${{ env.VCPKG_COMMIT }}" }

      - name: Configure
        run: cmake --preset=ci-sanitize

      - name: Build
        run: cmake --build build/sanitize -j 2

      - name: Test
        working-directory: build/sanitize
        env:
          ASAN_OPTIONS: "strict_string_checks=1:\
            detect_stack_use_after_return=1:\
            check_initialization_order=1:\
            strict_init_order=1:\
            detect_leaks=1:\
            halt_on_error=1"
          UBSAN_OPTIONS: "print_stacktrace=1:\
            halt_on_error=1"
        run: ctest --output-on-failure --no-tests=error -j 2

  test:
    if: false
    needs: format-and-spell
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - windows-2022
        compiler:
          - llvm-18
        include:
          - os: ubuntu-22.04
            compiler: gcc-13
          - os: windows-2022
            compiler: msvc
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Install compiler and clang-tidy on Ubuntu
        if: contains(matrix.os, 'ubuntu')
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          clangtidy: ${{ env.LLVM_VERSION }}

      - name: Set up tools
        uses: aminya/setup-cpp@v1
        with:
          vcvarsall: ${{ contains(matrix.os, 'windows') }}
          cmake: 3.28.6
          ninja: 1.10.1
          cppcheck: ${{ contains(matrix.os, 'ubuntu') }}

      - name: Print versions of build tools
        run: |
          cmake --version
          ninja --version

      - name: Print versions of static analysis tools
        if: contains(matrix.os, 'ubuntu')
        run: |
          clang-tidy --version
          cppcheck --version

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ env.VCPKG_COMMITTISH }}-
            vcpkg-${{ runner.os }}-${{ matrix.compiler }}-
            vcpkg-${{ runner.os }}-

      - name: Set up MultiToolTask
        if: contains(matrix.os, 'windows')
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Compute preset name
        shell: pwsh
        run: |
          $preset = "ci-$("${{ matrix.os }}".split("-")[0])"
          if ("${{ contains(matrix.os, 'windows') }}" -eq "true") {
            $preset += ("${{ contains(matrix.compiler, 'msvc') }}" -eq 'true') ? "-msvc" : "-clang-cl"
          }
          Add-Content "$env:GITHUB_ENV" "PRESET=$preset"
          echo $preset

      - name: Configure
        shell: pwsh
        run: |
          if("${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'llvm') }}" -eq "true") {
            $CXX = "clang++"
          }
          cmake --preset=${{ env.PRESET }}

      - name: Build and test debug configuration
        run: |
          cmake --build --preset=${{ env.PRESET }}-debug
          ctest --preset ${{ env.PRESET }}

      - name: Build and test release configuration
        run: |
          cmake --build --preset=${{ env.PRESET }}-release
          ctest --preset ${{ env.PRESET }}

  windows:
    needs: format-and-spell
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Set up build tools
        uses: aminya/setup-cpp@v1
        with:
          vcvarsall: true
          cmake: ${{ env.CMAKE_VERSION }}
          ninja: ${{ env.NINJA_VERSION }}

      - name: Print version of build tools
        run: |
          cmake --version
          ninja --version

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
            vcpkg-${{ runner.os }}

      - name: Set up MultiToolTask
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Configure, build, and test debug and release configurations using MSVC
        run: |
          cmake --preset=ci-windows-msvc
          cmake --build --preset=ci-windows-msvc-debug
          ctest --preset ci-windows-msvc
          cmake --build --preset=ci-windows-msvc-release
          ctest --preset ci-windows-msvc

      - name: Configure, build, and test debug and release configurations using clang-cl
        run: |
          cmake --preset=ci-windows-clang-cl
          cmake --build --preset=ci-windows-clang-cl-debug
          ctest --preset ci-windows-clang-cl
          cmake --build --preset=ci-windows-clang-cl-release
          ctest --preset ci-windows-clang-cl

  ubuntu:
    needs: format-and-spell
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install GCC 13
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc-13.1.0

      - name: Print compiler versions
        run: |
          g++ --version
          clang++ --version || true

      - name: Install LLVM ${{ env.LLVM_VERSION }} and tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm-${{ env.LLVM_VERSION }}
          cmake: ${{ env.CMAKE_VERSION }}
          ninja: ${{ env.NINJA_VERSION }}
          clangtidy: ${{ env.LLVM_VERSION }}
          cppcheck: true

      - name: Print versions of compilers and tools
        run: |
          cmake --version
          ninja --version
          clang-tidy --version
          cppcheck --version
          g++ --version || true
          clang++ --version || true

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
            vcpkg-${{ runner.os }}

      - name: Configure, build, and test debug and release configurations using GCC
        run: |
          export CXX=g++
          cmake --preset=ci-ubuntu
          cmake --build --preset=ci-ubuntu-debug
          ctest --preset ci-ubuntu
          cmake --build --preset=ci-ubuntu-release
          ctest --preset ci-ubuntu

      - name: Configure, build, test, and generate coverage report using GCC
        run: |
          cmake --preset=ci-coverage-gcc
          cmake --build --preset=ci-coverage-gcc
          ctest --preset ci-coverage-gcc
          cmake --build --preset=ci-coverage-gcc -t coverage

      - name: Upload HTML coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: build/ci-coverage-gcc/coverage_html/

      - name: Configure, build, and test with sanitizers using GCC
        run: |
          export CXX=g++
          cmake --preset=ci-sanitize
          cmake --build --preset=ci-sanitize
          ctest --preset ci-sanitize

      - name: Configure, build, and test debug and release configurations using Clang
        run: |
          rm -r build
          export CXX=clang++
          cmake --preset=ci-ubuntu
          cmake --build --preset=ci-ubuntu-debug
          ctest --preset ci-ubuntu
          cmake --build --preset=ci-ubuntu-release
          ctest --preset ci-ubuntu

      - name: Configure, build, and test with sanitizers using Clang
        run: |
          export CXX=clang++
          cmake --preset=ci-sanitize
          cmake --build --preset=ci-sanitize
          ctest --preset ci-sanitize
