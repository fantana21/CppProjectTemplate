name: Continuous Integration

on:
  push:
    branches:
    - main

  pull_request:
    branches:
    - main

env:
  LLVM_VERSION: 18.1.5
  VCPKG_COMMITTISH: 49ac2134b31b95b0ddf29d56873dcd24392691df

jobs:
  format-and-spell:
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Set up clang-format
      uses: aminya/setup-cpp@v1
      with:
        clangformat: ${{ env.LLVM_VERSION }}

    - name: Install codespell and cmake-format
      run: pip install codespell cmakelang

    - name: Print versions
      run: |
        python --version
        pip --version
        cmake --version
        clang-format --version
        cmake-format --version
        codespell --version

    - name: Format code
      run: cmake -P CMake/Format.cmake

    - name: Spell check
      run: cmake -P CMake/Spell.cmake

  build-and-test:
    if: false
    needs: [format-and-spell]
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - windows-2022
        compiler:
          - clang-18.1.5
          - gcc-13
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

  coverage:
    if: false
    needs: [format-and-spell]
    runs-on: ubuntu-22.04
    steps:
    - uses: actions/checkout@v4

    - name: Install LCov
      run: sudo apt-get update -q
        && sudo apt-get install lcov -q -y

    - name: Install vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: { committish: "${{ env.VCPKG_COMMIT }}" }

    - name: Configure
      run: cmake --preset=ci-coverage

    - name: Build
      run: cmake --build build/coverage -j 2

    - name: Test
      run: ctest --test-dir build/coverage --output-on-failure --no-tests=error -j 2

    - name: Process coverage info
      run: cmake --build build/coverage -t coverage

  sanitize:
    if: false
    needs: [format-and-spell]
    runs-on: ubuntu-22.04
    env: { CXX: clang++-14 }
    steps:
    - uses: actions/checkout@v4

    - name: Install vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with: { committish: "${{ env.VCPKG_COMMIT }}" }

    - name: Configure
      run: cmake --preset=ci-sanitize

    - name: Build
      run: cmake --build build/sanitize -j 2

    - name: Test
      working-directory: build/sanitize
      env:
        ASAN_OPTIONS: "strict_string_checks=1:\
          detect_stack_use_after_return=1:\
          check_initialization_order=1:\
          strict_init_order=1:\
          detect_leaks=1:\
          halt_on_error=1"
        UBSAN_OPTIONS: "print_stacktrace=1:\
          halt_on_error=1"
      run: ctest --output-on-failure --no-tests=error -j 2

  test:
    needs: format-and-spell
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-22.04
          - windows-2022
        compiler:
          - llvm-18.1.5
        include:
          - os: ubuntu-22.04
            compiler: gcc-13
          - os: windows-2022
            compiler: msvc
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4

    - name: Set up compilers and tools
      uses: aminya/setup-cpp@v1
      with:
        compiler: ${{ matrix.compiler }}
        vcvarsall: ${{ contains(matrix.os, 'windows') }}
        cmake: 3.28.6
        ninja: 1.10.1
        clangtidy: ${{ env.LLVM_VERSION }}
        cppcheck: true

    - name: Install vcpkg
      uses: friendlyanon/setup-vcpkg@v1
      with:
        committish: ${{ env.VCPKG_COMMITTISH }}

    - name: Set up MultiToolTask
      if: contains(matrix.os, 'windows')
      run: |
        Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
        Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

    - name: Compute preset name
      shell: pwsh
      run: |
        $preset = "ci-$("${{ matrix.os }}".split("-")[0])"
        if ("${{ contains(matrix.os, 'windows') }}" -eq "true") {
          $preset += ("${{ contains(matrix.compiler, 'msvc') }}" -eq 'true') ? "-msvc" : "-clang-cl"
        }
        Add-Content "$env:GITHUB_ENV" "PRESET=$preset"
        echo $preset

    - name: Print preset name
      shell: pwsh
      run: |
        echo ${{ env.PRESET}}
        echo $env:PRESET

    - name: Configure
      shell: pwsh
      run: |
        if("${{ contains(matrix.os, 'ubuntu') && contains(matrix.compiler, 'llvm') }}" -eq "true") {
          $CXX = "clang++"
        }
        cmake --preset=${{ env.PRESET }}

    - name: Build debug configuration
      run: |
        echo "Build preset = ${{ env.PRESET }}-debug"
        cmake --build --preset=${{ env.PRESET }}-debug

    - name: Test debug configuration
      working-directory: build/${{ env.PRESET }}
      run: ctest --output-on-failure --no-tests=error -C Debug -j 2

    - name: Build release configuration
      run: |
        echo "Build preset = ${{ env.PRESET }}-release"
        cmake --build --preset=${{ env.PRESET }}-release

    - name: Test release configuration
      working-directory: build/${{ env.PRESET }}
      run: ctest --output-on-failure --no-tests=error -C Release -j 2
