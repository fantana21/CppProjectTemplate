name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  VCPKG_COMMITTISH: 49ac2134b31b95b0ddf29d56873dcd24392691df

jobs:
  check-formatting-and-spelling:
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up tools
        run: |
          sudo apt update -q
          sudo apt install -y clang-format-19
          pipx install cmakelang codespell
          sudo update-alternatives --install /usr/bin/clang-format clang-format /usr/bin/clang-format-19 9999

      - name: Print versions
        run: |
          python --version
          pipx --version
          cmake --version
          clang-format --version
          clang-format-19 --version
          cmake-format --version
          codespell --version

      - name: Check code formatting
        run: cmake -P CMake/Format.cmake

      - name: Check spelling
        run: cmake -P CMake/Spell.cmake

  build-and-test-windows:
    needs: check-formatting-and-spelling
    strategy:
      fail-fast: false
      matrix:
        # TODO: Try windows-2025
        os:
          - windows-2022
        compiler:
          - MSVC
          - clang-cl
        include:
          - compiler: MSVC
            compiler-kebap-case: msvc
            compiler-pascal-case: Msvc
          - compiler: clang-cl
            compiler-kebap-case: clang-cl
            compiler-pascal-case: ClangCl
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up MSVC environment
        if: ${{ matrix.compiler == 'clang-cl' }}
        uses: aminya/setup-cpp@v1
        with:
          vcvarsall: true

      - name: Print versions
        shell: bash
        run: |
          cmake --version
          ninja --version
          cl || true
          clang-cl --version || true

      - name: Set up vcpkg
        uses: fantana21/set-up-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ matrix.compiler-kebap-case }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}-${{ github.sha }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ matrix.compiler-kebap-case }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
            vcpkg-${{ runner.os }}-${{ matrix.compiler-kebap-case }}
            vcpkg-${{ runner.os }}
          save-always: true
          use-private-registry: true
          private-registry-pat: ${{ secrets.VCPKG_REGISTRY_PAT }}

      - name: Pre-seed credentials for private repos
        run: |
          "url=https://github.com`nusername=AllRepositories`npassword=${{ secrets.ALL_REPOSITORIES_PAT }}`n" | git credential approve

      - name: Improve parallelism of MSBuild
        if: ${{ matrix.compiler-kebap-case == 'msvc' }}
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Build and test debug and release mode
        run: |
          cmake --preset ci-windows-${{ matrix.compiler-kebap-case }}
          cmake --build --preset ci-windows-${{ matrix.compiler-kebap-case }}-debug | Tee-Object -FilePath ${{ matrix.compiler }}_Debug_build.log
          ctest --preset ci-windows-${{ matrix.compiler-kebap-case }}
          cmake --build --preset ci-windows-${{ matrix.compiler-kebap-case }}-release | Tee-Object -FilePath ${{ matrix.compiler }}_Release_build.log
          ctest --preset ci-windows-${{ matrix.compiler-kebap-case }}

      - name: Count and report warnings
        uses: fantana21/report-warnings@v1
        with:
          build-logs: |
            ${{ matrix.compiler }}_Debug_build.log
            ${{ matrix.compiler }}_Release_build.log
          artifact-name: WarningsReport${{ matrix.compiler-pascal-case }}
          pr-comment-header: ${{ matrix.compiler }} warnings report

  build-and-test-ubuntu:
    needs: check-formatting-and-spelling
    strategy:
      fail-fast: false
      matrix:
        os:
          - ubuntu-24.04
        compiler:
          - gcc-14
          - llvm-19
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4

      - name: Set up C++ tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: ${{ matrix.compiler }}
          clang-tidy: 19
          cppcheck: true
          gcovr: true

      - name: Install valgrind
        run: |
          sudo apt update -q
          sudo apt install -y valgrind

      - name: Print versions
        run: |
          g++ --version || true
          clang++ --version || true
          cmake --version || true
          ninja --version || true
          clang-tidy --version || true
          cppcheck --version || true
          gcovr --version || true
          gcov --version || true
          llvm-cov --version || true
          valgrind --version || true

      - name: Set up vcpkg
        uses: fantana21/set-up-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}-${{ github.sha }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ matrix.compiler }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
            vcpkg-${{ runner.os }}-${{ matrix.compiler }}
            vcpkg-${{ runner.os }}
          save-always: true
          use-private-registry: true
          private-registry-pat: ${{ secrets.VCPKG_REGISTRY_PAT }}

      - name: Set up credential helper for private repos
        run: |
          git config --global credential.https://github.com/fantana21.helper '!f() { echo username=AllRepositories; echo password=${{ secrets.ALL_REPOSITORIES_PAT }}; }; f'

      - name: Build and test debug and release mode
        id: test
        run: |
          cmake --preset ci-ubuntu
          cmake --build --preset ci-ubuntu-debug | tee ${{ matrix.compiler }}_Debug_build.log
          ctest --preset ci-ubuntu
          cmake --build --preset ci-ubuntu-release | tee ${{ matrix.compiler }}_Release_build.log
          ctest --preset ci-ubuntu

      - name: Build, test, and generate coverage reports
        id: coverage
        run: |
          cmake --workflow --preset ci-coverage

      - name: Build and test with sanitizers
        id: sanitize
        if: ${{ !cancelled() && steps.test.conclusion == 'success' }}
        run: |
          cmake --workflow --preset ci-sanitize

      - name: Build and test debug and release mode with Valgrind
        # Running tests with Valgrind is slow, so we only do it if running them with sanitizers
        # succeeded
        if: ${{ !cancelled() && steps.sanitize.conclusion == 'success' }}
        run: |
          cmake --workflow --preset ci-valgrind

      - name: Count and report warnings
        if: ${{ !cancelled() && steps.test.conclusion == 'success' }}
        uses: fantana21/report-warnings@v1
        with:
          build-logs: |
            ${{ matrix.compiler }}_Debug_build.log
            ${{ matrix.compiler }}_Release_build.log
          artifact-name: WarningsReport${{ matrix.compiler }}
          pr-comment-header: ${{ matrix.compiler }} warnings report

      - name: Report coverage results as job summary, PR comment, and artifact
        if: ${{ !cancelled() && steps.coverage.conclusion == 'success' }}
        uses: fantana21/report-coverage@v1
        with:
          pr-comment-header: ${{ matrix.compiler }}
          artifact-name: CoverageReports${{ matrix.compiler }}
