name: Continuous Integration

on:
  push:
    branches:
      - main

  pull_request:
    branches:
      - main

env:
  LLVM_VERSION: 18.1.5
  CMAKE_VERSION: 3.28.6
  NINJA_VERSION: 1.10.1
  VCPKG_COMMITTISH: 49ac2134b31b95b0ddf29d56873dcd24392691df

jobs:
  format-and-spell:
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Set up clang-format
        uses: aminya/setup-cpp@v1
        with:
          clangformat: ${{ env.LLVM_VERSION }}

      - name: Install codespell and cmake-format
        run: pip install codespell cmakelang

      - name: Print versions
        run: |
          python --version
          pip --version
          cmake --version
          clang-format --version
          cmake-format --version
          codespell --version

      - name: Format code
        run: cmake -P CMake/Format.cmake

      - name: Spell check
        run: cmake -P CMake/Spell.cmake

  test-windows:
    needs: format-and-spell
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      - name: Set up build tools
        uses: aminya/setup-cpp@v1
        with:
          vcvarsall: true
          cmake: ${{ env.CMAKE_VERSION }}
          ninja: ${{ env.NINJA_VERSION }}

      - name: Print version of build tools
        run: |
          cmake --version
          ninja --version

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
            vcpkg-${{ runner.os }}

      - name: Set up MultiToolTask
        run: |
          Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
          Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      - name: Configure, build, and test debug and release configurations using MSVC
        run: |
          cmake --preset=ci-windows-msvc
          cmake --build --preset=ci-windows-msvc-debug
          ctest --preset ci-windows-msvc
          cmake --build --preset=ci-windows-msvc-release
          ctest --preset ci-windows-msvc

      - name: Configure, build, and test debug and release configurations using clang-cl
        run: |
          cmake --preset=ci-windows-clang-cl
          cmake --build --preset=ci-windows-clang-cl-debug
          ctest --preset ci-windows-clang-cl
          cmake --build --preset=ci-windows-clang-cl-release
          ctest --preset ci-windows-clang-cl

  test-ubuntu:
    needs: format-and-spell
    runs-on: ubuntu-22.04
    steps:
      - uses: actions/checkout@v4

      - name: Install GCC 13
        uses: aminya/setup-cpp@v1
        with:
          compiler: gcc-13

      - name: Print compiler versions
        run: |
          g++ --version
          clang++ --version || true

      - name: Install LLVM ${{ env.LLVM_VERSION }} and tools
        uses: aminya/setup-cpp@v1
        with:
          compiler: llvm-${{ env.LLVM_VERSION }}
          cmake: ${{ env.CMAKE_VERSION }}
          ninja: ${{ env.NINJA_VERSION }}
          clangtidy: ${{ env.LLVM_VERSION }}
          cppcheck: true

      - name: Install LCOV
        run: |
          sudo apt-get update -q
          sudo apt-get install lcov -q -y

      - name: Print versions of compilers and tools
        run: |
          g++ --version || true
          clang++ --version
          cmake --version
          ninja --version
          clang-tidy --version
          cppcheck --version
          lcov --version

      - name: Install vcpkg
        uses: friendlyanon/setup-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
            vcpkg-${{ runner.os }}

      - name: Configure, build, and test debug and release configurations using GCC
        id: test-gcc
        run: |
          export CXX=g++
          cmake --preset=ci-ubuntu
          cmake --build --preset=ci-ubuntu-debug
          ctest --preset ci-ubuntu
          cmake --build --preset=ci-ubuntu-release
          ctest --preset ci-ubuntu

      - name: Configure, build, test, and generate coverage report using GCC
        run: |
          cmake --preset=ci-coverage-gcc
          cmake --build --preset=ci-coverage-gcc
          ctest --preset ci-coverage-gcc
          cmake --build --preset=ci-coverage-gcc -t coverage

      - name: Upload HTML coverage report as artifact
        uses: actions/upload-artifact@v4
        with:
          name: CoverageReport
          path: build/ci-coverage-gcc/coverage_html/

      - name: Configure, build, and test with sanitizers using GCC
        if: ${{ !cancelled() && steps.test-gcc.conclusion == 'success' }}
        run: |
          export CXX=g++
          cmake --preset=ci-sanitize
          cmake --build --preset=ci-sanitize
          ctest --preset ci-sanitize

      - name: Configure, build, and test debug and release configurations using Clang
        id: test-clang
        if: ${{ !cancelled() }}
        run: |
          rm -r build
          export CXX=clang++
          cmake --preset=ci-ubuntu
          cmake --build --preset=ci-ubuntu-debug
          ctest --preset ci-ubuntu
          cmake --build --preset=ci-ubuntu-release
          ctest --preset ci-ubuntu

      - name: Configure, build, and test with sanitizers using Clang
        if: ${{ !cancelled() && steps.test-clang.conclusion == 'success' }}
        run: |
          export CXX=clang++
          cmake --preset=ci-sanitize
          cmake --build --preset=ci-sanitize
          ctest --preset ci-sanitize
