name: CI

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

env:
  CMAKE_VERSION: "3.29.6"
  VCPKG_COMMITTISH: 49ac2134b31b95b0ddf29d56873dcd24392691df

jobs:
  format-and-spell:
    if: false
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Install codespell and cmake-format
        run: pipx install codespell cmakelang

      - name: Print versions
        run: |
          python --version
          pipx --version
          cmake --version
          clang-format --version
          cmake-format --version
          codespell --version

      - name: Format code
        run: cmake -P CMake/Format.cmake

      - name: Spell check
        run: cmake -P CMake/Spell.cmake

  test-windows:
    # needs: format-and-spell
    runs-on: windows-2022
    steps:
      - uses: actions/checkout@v4

      # - name: Set up build tools
      #   uses: aminya/setup-cpp@v1
      #   with:
      #     vcvarsall: true
      #     cmake: ${{ env.CMAKE_VERSION }}
      #     ninja: true

      # - name: Print version of build tools
      #   run: |
      #     cmake --version
      #     ninja --version

      - name: Set GIT_TRACE and similar environment variables
        run: |
          Add-Content "$env:GITHUB_ENV" 'GIT_TRACE=2'
          Add-Content "$env:GITHUB_ENV" 'GIT_TRANSFER_TRACE=2'
          Add-Content "$env:GITHUB_ENV" 'GIT_CURL_VERBOSE=2'

      - name: Print Git credential stuff
        run: |
          git config --global credential.helper
          git config credential.helper
          git config --list
          echo "---"
          git help -a | Select-String -Pattern 'credential'

      # - name: Set up vcpkg
      #   uses: fantana21/set-up-vcpkg@v1
      #   with:
      #     committish: ${{ env.VCPKG_COMMITTISH }}
      #     cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
      #     cache-restore-keys: |
      #       vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
      #       vcpkg-${{ runner.os }}
      #     use-private-registry: true
      #     private-registry-pat: ${{ secrets.VCPKG_REGISTRY_PAT }}

      - name: Configure credential helper
        run: |
          git config credential.helper
          git config --global credential.helper
          git config --system credential.helper
          git config --local credential.helper
          git config --system credential.helper store
          git config --global credential.usehttppath=true
          echo --- global ---
          git config --global --list
          echo --- system ---
          git config --system --list
          echo --- local ---
          git config --local --list

      - name: Pre-seed credentials for private repos
        if: ${{ !cancelled() }}
        run: |
          "url=https://github.com`npath=fantana21/BaumerGapiSdk`nusername=BaumerGapiSdk`npassword=${{ secrets.BAUMER_GAPI_SDK_PAT }}`n" | git credential approve
          "url=https://github.com`npath=fantana21/QuantNd`nusername=QuantNd`npassword=${{ secrets.QUANTND_PAT }}`n" | git credential approve
          "url=https://github.com`npath=fantana21/vcpkg-registry`nusername=vcpkg-registry`npassword=${{ secrets.VCPKG_REGISTRY_PAT }}`n" | git credential approve

      - name: Git clone BaumerGapiSdk
        if: ${{ !cancelled() }}
        run: git clone https://github.com/fantana21/BaumerGapiSdk.git test/BaumerGapiSdk

      - name: Git clone QuantNd
        if: ${{ !cancelled() }}
        run: git clone https://github.com/fantana21/QuantNd.git test/QuantNd

      - name: Git clone vcpkg-registry
        if: ${{ !cancelled() }}
        run: git clone https://github.com/fantana21/vcpkg-registry.git test/vcpkg-registry

      - name: Print credentials file
        if: ${{ !cancelled() }}
        run: cat ~/.git-credentials

      # - name: Set up MultiToolTask
      #   run: |
      #     Add-Content "$env:GITHUB_ENV" 'UseMultiToolTask=true'
      #     Add-Content "$env:GITHUB_ENV" 'EnforceProcessCountAcrossBuilds=true'

      # - name: Build and test debug and release mode (MSVC)
      #   run: cmake --workflow --preset ci-windows-msvc

      # - name: Print log
      #   if: ${{ !cancelled() }}
      #   run: Get-Content D:\a\CppProjectTemplate\CppProjectTemplate\vcpkg\buildtrees\quantnd\git-fetch-x64-windows-static-md-err.log

      # - name: Build and test debug and release mode (clang-cl)
      #   run: cmake --workflow --preset ci-windows-clang-cl

  test-ubuntu:
    needs: format-and-spell
    runs-on: ubuntu-24.04
    steps:
      - uses: actions/checkout@v4

      - name: Install tools
        run: |
          sudo apt-get update -q
          sudo apt-get install -y cppcheck ninja-build valgrind llvm
          pipx install gcovr

      - name: Print and store version info
        shell: pwsh
        run: |
          g++ --version
          clang++ --version
          cmake --version
          ninja --version
          clang-tidy --version
          cppcheck --version
          gcovr --version
          gcov --version
          llvm-cov --version
          valgrind --version

          $CLANG_VERSIONS = (clang++ --version | Select-String -Pattern '([0-9]+)\.([0-9]+)\.([0-9]+)').Matches.Groups.Value
          "CLANG_MAJOR_VERSION=$($CLANG_VERSIONS[1])" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Install Include What You Use
        run: |
          sudo apt-get install -y llvm-${{ env.CLANG_MAJOR_VERSION }}-dev libclang-${{ env.CLANG_MAJOR_VERSION }}-dev
          git clone --depth 1 --branch clang_${{ env.CLANG_MAJOR_VERSION }} https://github.com/include-what-you-use/include-what-you-use.git
          cd include-what-you-use
          cmake -B build -S . -G Ninja -DCMAKE_PREFIX_PATH=/usr/lib/llvm-${{ env.CLANG_MAJOR_VERSION }}
          cmake --build build
          sudo cmake --install build

      - name: Set GIT_TRACE and similar environment variables
        run: |
          Add-Content "$env:GITHUB_ENV" 'GIT_TRACE=1'
          Add-Content "$env:GITHUB_ENV" 'GIT_TRANSFER_TRACE=1'
          Add-Content "$env:GITHUB_ENV" 'GIT_CURL_VERBOSE=1'

      - name: Print Git credential stuff
        run: |
          git config --global credential.helper || echo "No global credential helper set"
          git config --system credential.helper || echo "No system credential helper set"
          git config --local credential.helper || echo "No local credential helper set"
          git config credential.helper || echo "No credential helper set"
          git config --list
          echo "---"
          git help -a | grep credential

      - name: Set up vcpkg
        id: set-up-vcpkg
        uses: fantana21/set-up-vcpkg@v1
        with:
          committish: ${{ env.VCPKG_COMMITTISH }}
          cache-key: vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}-${{ hashFiles('vcpkg.json', 'CMakePresets.json') }}
          cache-restore-keys: |
            vcpkg-${{ runner.os }}-${{ env.VCPKG_COMMITTISH }}
            vcpkg-${{ runner.os }}
          use-private-registry: true
          private-registry-pat: ${{ secrets.VCPKG_REGISTRY_PAT }}

      - name: Pre-seed credentials for QuantNd
        run: |
          git config --list
          echo "---"
          echo "url=https://github.com"$'\n'"path=fantana21/QuantNd"$'\n'"username=unused"$'\n'"password=${{ secrets.QUANTND_PAT }}"$'\n' | git credential approve
          git config --list

      - name: Build and test debug and release mode (GCC)
        id: test-gcc
        run: |
          export CXX=g++
          cmake --workflow --preset ci-ubuntu

      - name: Print log
        if: ${{ !cancelled() }}
        run: cat /home/runner/work/CppProjectTemplate/CppProjectTemplate/vcpkg/buildtrees/quantnd/git-fetch-x64-linux-err.log

      - name: Build, test, and generate coverage reports (GCC)
        run: |
          export CXX=g++
          cmake --workflow --preset ci-coverage

      - name: Report coverage results as job summary, PR comment, and artifact (GCC)
        uses: fantana21/report-coverage@v1
        with:
          pr-comment-header: gcc
          artifact-name: CoverageReportsGcc

      - name: Build and test with sanitizers (GCC)
        id: sanitize-gcc
        if: ${{ !cancelled() && steps.test-gcc.conclusion == 'success' }}
        run: |
          export CXX=g++
          cmake --workflow --preset ci-sanitize

      - name: Build and test debug and release mode with Valgrind (GCC)
        # Running tests with Valgrind is slow, so we only do it if running them with sanitizers
        # succeeded
        if: ${{ !cancelled() && steps.sanitize-gcc.conclusion == 'success' }}
        run: |
          export CXX=g++
          cmake --workflow --preset ci-valgrind

      - name: Build and test debug and release mode (Clang)
        id: test-clang
        if: ${{ !cancelled() && steps.set-up-vcpkg.conclusion == 'success' }}
        run: |
          rm -rf build
          export CXX=clang++
          cmake --workflow --preset ci-ubuntu

      - name: Build, test, and generate coverage reports (Clang)
        id: coverage-clang
        if: ${{ !cancelled() && steps.test-clang.conclusion == 'success' }}
        run: |
          export CXX=clang++
          cmake --workflow --preset ci-coverage

      - name: Report coverage results as job summary, PR comment, and artifact (Clang)
        if: ${{ !cancelled() && steps.coverage-clang.conclusion == 'success' }}
        uses: fantana21/report-coverage@v1
        with:
          pr-comment-header: clang
          artifact-name: CoverageReportsClang

      - name: Build and test with sanitizers (Clang)
        id: sanitize-clang
        if: ${{ !cancelled() && steps.test-clang.conclusion == 'success' }}
        run: |
          export CXX=clang++
          cmake --workflow --preset ci-sanitize

      - name: Build and test debug and release mode with Valgrind (Clang)
        # Running tests with Valgrind is slow, so we only do it if running them with sanitizers
        # succeeded.
        if: ${{ !cancelled() && steps.sanitize-clang.conclusion == 'success' }}
        run: |
          export CXX=clang++
          cmake --workflow --preset ci-valgrind
